---
description: create and modify project progress
globs: 
---

# Progress Tracking Rule for AI

## Core Rules

1. **Initial Setup**
   - When starting a project, check if a file named `progress_record.md` exists in the root directory
   - If it doesn't exist, create it immediately before proceeding with other tasks
   - Perform an initial project scan to identify all key files, directories, and components
   - Document the initial project state in the newly created progress record

2. **Content Structure**
   - The progress record must contain the following sections:
     - **Project Overview**: Brief description of the project
     - **File Structure**: Tree representation of key project files and directories
     - **Components**: List of major components and their purposes
     - **Progress Log**: Chronological record of all changes with timestamps
     - **Current Status**: Summary of the project's current state
     - **Next Steps**: Planned or recommended actions

3. **Update Protocol**
   - Every modification to the project must be recorded in the progress log
   - Each entry must include:
     - Timestamp in ISO format (YYYY-MM-DD HH:MM)
     - Type of change (Added, Modified, Removed, Refactored, Fixed)
     - Files or components affected
     - Brief description of changes made
     - Reason for the change (if applicable)
   
4. **Commit-Style Updates**
   - Format updates similar to Git commits with:
     - Short summary title (max 72 characters)
     - Detailed description when necessary
     - Reference to related issue/task numbers if available
   - Use consistent prefixes for different types of changes:
     - `feat:` for new features
     - `fix:` for bug fixes
     - `docs:` for documentation changes
     - `refactor:` for code refactoring
     - `test:` for test-related changes
     - `chore:` for maintenance tasks

5. **Regular Review**
   - Periodically review the entire progress record to ensure completeness
   - Update the "Current Status" section to reflect the latest state of the project
   - Revise "Next Steps" based on current progress and project goals

## Implementation Examples

### Example 1: Initial Creation of progress_record.md

```markdown
# Project Progress Record

## Project Overview
TaskMaster - A productivity application for managing daily tasks and projects

## File Structure
```
project/
├── src/
│   ├── components/
│   ├── utils/
│   └── App.js
├── public/
├── package.json
└── README.md
```

## Components
- Task Management System
- User Authentication
- Data Persistence Layer
- UI Components

## Progress Log
2025-02-27 14:30 - **Initial project setup**
- Created base file structure
- Initialized npm package
- Added README with project description

## Current Status
Project initialized with basic structure. No functional components yet.

## Next Steps
- Set up basic React components
- Implement user authentication
- Create task data model
```

### Example 2: Update to progress_record.md after changes

```markdown
# Project Progress Record

## Project Overview
TaskMaster - A productivity application for managing daily tasks and projects

## File Structure
```
project/
├── src/
│   ├── components/
│   │   ├── Task.js
│   │   ├── TaskList.js
│   │   └── Header.js
│   ├── utils/
│   │   └── auth.js
│   └── App.js
├── public/
├── package.json
└── README.md
```

## Components
- Task Management System
- User Authentication (in progress)
- Data Persistence Layer
- UI Components (basic implementation complete)

## Progress Log
2025-02-27 14:30 - **Initial project setup**
- Created base file structure
- Initialized npm package
- Added README with project description

2025-02-27 16:45 - **feat: Add basic UI components**
- Created Task.js component for individual task display
- Implemented TaskList.js to manage multiple tasks
- Added Header.js for application navigation
- Updated App.js to include new components

2025-02-27 18:20 - **docs: Update component documentation**
- Added JSDoc comments to all component files
- Updated README with component usage examples

## Current Status
Basic UI components implemented. Authentication system in progress.

## Next Steps
- Complete user authentication system
- Implement data persistence with localStorage
- Add task filtering and sorting features
```