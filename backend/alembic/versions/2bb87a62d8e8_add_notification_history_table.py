"""add notification history table

Revision ID: 2bb87a62d8e8
Revises: add_supplier_category_relation
Create Date: 2025-02-11 19:32:49.038424

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '2bb87a62d8e8'
down_revision: Union[str, None] = 'add_supplier_category_relation'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_order_processing_id', table_name='order_processing')
    op.drop_table('order_processing')
    op.drop_table('supplier_category')
    op.add_column('notification_history', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.drop_column('notification_history', 'sent_at')
    op.create_unique_constraint('uq_supplier_category', 'supplier_categories', ['supplier_id', 'category_id'])
    op.drop_constraint('supplier_categories_supplier_id_fkey', 'supplier_categories', type_='foreignkey')
    op.drop_constraint('supplier_categories_category_id_fkey', 'supplier_categories', type_='foreignkey')
    op.create_foreign_key(None, 'supplier_categories', 'suppliers', ['supplier_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'supplier_categories', 'categories', ['category_id'], ['id'], ondelete='CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'supplier_categories', type_='foreignkey')
    op.drop_constraint(None, 'supplier_categories', type_='foreignkey')
    op.create_foreign_key('supplier_categories_category_id_fkey', 'supplier_categories', 'categories', ['category_id'], ['id'])
    op.create_foreign_key('supplier_categories_supplier_id_fkey', 'supplier_categories', 'suppliers', ['supplier_id'], ['id'])
    op.drop_constraint('uq_supplier_category', 'supplier_categories', type_='unique')
    op.add_column('notification_history', sa.Column('sent_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_column('notification_history', 'created_at')
    op.create_table('supplier_category',
    sa.Column('supplier_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], name='supplier_category_category_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['supplier_id'], ['suppliers.id'], name='supplier_category_supplier_id_fkey', ondelete='CASCADE'),
    sa.UniqueConstraint('supplier_id', 'category_id', name='uq_supplier_category')
    )
    op.create_table('order_processing',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('order_item_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('supplier_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('processed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], name='order_processing_category_id_fkey'),
    sa.ForeignKeyConstraint(['order_item_id'], ['order_items.id'], name='order_processing_order_item_id_fkey'),
    sa.ForeignKeyConstraint(['supplier_id'], ['suppliers.id'], name='order_processing_supplier_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='order_processing_pkey')
    )
    op.create_index('ix_order_processing_id', 'order_processing', ['id'], unique=False)
    # ### end Alembic commands ###
